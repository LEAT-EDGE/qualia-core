[bench]
name        = "EuroSat_CNN"
seed        = 6
first_run   = 1
last_run    = 3

[learningframework]
kind = "PyTorch"              # Multi-step processing for efficiency
params.devices  = 1           # Number of devices to use

[dataset]
kind            = "EuroSAT"
params.path     = "data/EuroSAT"    # Path to extracted dataset
params.variant  = "MS"

[[preprocessing]]
kind = "Class2BinMatrix"

## Data Augmentation not in the paper, but useful for training
[[data_augmentation]]
kind = "Rotation2D"
params.before   = false    # Apply before GPU transfer
params.after    = true    # Apply after GPU transfer
params.evaluate = false # Use during inference

[[data_augmentation]]
kind = "HorizontalFlip"
params.before   = false    # Apply before GPU transfer
params.after    = true    # Apply after GPU transfer
params.evaluate = false # Use during inference

[[data_augmentation]]
kind = "GaussianNoise"
params.before   = false    # Apply before GPU transfer
params.after    = true    # Apply after GPU transfer
params.evaluate = false # Use during inference
##

[[postprocessing]]
kind            = "FuseBatchNorm"   # All Batchnorm must be Fused before the estimation
export          = true
params.evaluate = false

# Model configuration
[model_template]
kind = "CNN"  # CNN
params.dims         = 2
epochs              = 30
batch_size          = 512

[model_template.optimizer]
kind = "Adam"       # Adam optimizer for training in the paper
params.lr = 0.002   # start at 10-3 in the paper

[model_template.optimizer.scheduler]
kind = "CosineAnnealingLR"
params.T_max    = 30
params.eta_min  = 0.00001 # end at 10-5 in the paper

# CNN Networks to bo comparable with Lunghi Paper
# https://doi.org/10.48550/arXiv.2505.11418

##### Based network, CNN Maxpooling Linear ####
[[model]]
name = "eurosat_cnn_16x16" # target 73.33% in the paper
load                = false
train               = true
params.filters 		= [16, 16]
params.kernel_sizes	= [3 , 3 ]
params.paddings		= [0, 0]
params.strides		= [1, 1]
params.pool_sizes	= [2, 1]
params.dropouts     = [0, 0]
params.fc_units     = [13456] 
params.gsp          = false                      # End with a global sum pooling
params.batch_norm	= true
disabled = false

[[model]]
name = "eurosat_cnn_16x32" # target 79.41% in the paper
load                = false
train               = true
params.filters 		= [16, 32]
params.kernel_sizes	= [3 , 3 ]
params.paddings		= [0, 0]
params.strides		= [1, 1]
params.pool_sizes	= [2, 1]
params.dropouts     = [0, 0]
params.fc_units     = [26912] 
params.gsp          = false                      # End with a global sum pooling
params.batch_norm	= true
disabled = false

[[model]]
name = "eurosat_cnn_32x32x64" # target 85.56% in the paper
load                = false
train               = true
params.filters 		= [32, 32, 64]
params.kernel_sizes	= [3 , 3, 3 ]
params.paddings		= [0, 0, 0]
params.strides		= [1, 1, 1]
params.pool_sizes	= [2, 2, 1]
params.dropouts     = [0, 0, 0]
params.fc_units     = [9216] 
params.gsp          = false                      # End with a global sum pooling
params.batch_norm	= true
disabled = false
####

##### Tested network, CNN Stride Linear ####
[[model]]
name = "eurosat_cnn_st_16x16" # target 73.33% in the paper
load                = false
train               = true
params.filters 		= [16, 16]
params.kernel_sizes	= [3 , 3 ]
params.paddings		= [0, 0]
params.strides		= [2, 1]
params.pool_sizes	= [0, 0]
params.dropouts     = [0, 0]
params.fc_units     = [13456] 
params.gsp          = false                      # End with a global sum pooling
params.batch_norm	= true
disabled = false
[[model]]

name = "eurosat_cnn_st_16x32" # target 79.41% in the paper
load                = false
train               = true
params.filters 		= [16, 32]
params.kernel_sizes	= [3 , 3 ]
params.paddings		= [0, 0]
params.strides		= [2, 1]
params.pool_sizes	= [0, 0]
params.dropouts     = [0, 0]
params.fc_units     = [26912] 
params.gsp          = false                      # End with a global sum pooling
params.batch_norm	= true
disabled = false

[[model]]
name = "eurosat_cnn_st_32x32x64" # target 85.56% in the paper
load                = false
train               = true
params.filters 		= [32, 32, 64]
params.kernel_sizes	= [3 , 3, 3 ]
params.paddings		= [0, 0, 0]
params.strides		= [2, 2, 1]
params.pool_sizes	= [0, 0, 0]
params.dropouts     = [0, 0, 0]
params.fc_units     = [10816] 
params.gsp          = false                      # End with a global sum pooling
params.batch_norm	= true
disabled = false
####

##### Tested network, CNN Stride GSP ####
[[model]]
name = "eurosat_cnn_st_gsp_16x16" # target 73.33% in the paper
load                = false
train               = true
params.filters 		= [16, 16]
params.kernel_sizes	= [3 , 3 ]
params.paddings		= [0, 0]
params.strides		= [2, 1]
params.pool_sizes	= [0, 0]
params.dropouts     = [0, 0]
params.fc_units     = [] 
params.gsp          = true                      # End with a global sum pooling
params.batch_norm	= true
disabled = false

[[model]]
name = "eurosat_cnn_st_gsp_16x32" # target 79.41% in the paper
load                = false
train               = true
params.filters 		= [16, 32]
params.kernel_sizes	= [3 , 3 ]
params.paddings		= [0, 0]
params.strides		= [2, 1]
params.pool_sizes	= [0, 0]
params.dropouts     = [0, 0]
params.fc_units     = [] 
params.gsp          = true                      # End with a global sum pooling
params.batch_norm	= true
disabled = false

[[model]]
name = "eurosat_cnn_st_gsp_32x32x64" # target 85.56% in the paper
load                = false
train               = true
params.filters 		= [32, 32, 64]
params.kernel_sizes	= [3 , 3, 3 ]
params.paddings		= [0, 0, 0]
params.strides		= [2, 2, 1]
params.pool_sizes	= [0, 0, 0]
params.dropouts     = [0, 0, 0]
params.fc_units     = [] 
params.gsp          = true                      # End with a global sum pooling
params.batch_norm	= true
disabled = false
####

##### Tested network, CNN Maxpooling GSP ####
[[model]]
name = "eurosat_cnn_gsp_16x16" # target 73.33% in the paper
load                = false
train               = true
params.filters 		= [16, 16]
params.kernel_sizes	= [3 , 3 ]
params.paddings		= [0, 0]
params.strides		= [1, 1]
params.pool_sizes	= [2, 1]
params.dropouts     = [0, 0]
params.fc_units     = [] 
params.gsp          = true                      # End with a global sum pooling
params.batch_norm	= true
disabled = false

[[model]]
name = "eurosat_cnn_gsp_16x32" # target 79.41% in the paper
load                = false
train               = true
params.filters 		= [16, 32]
params.kernel_sizes	= [3 , 3 ]
params.paddings		= [0, 0]
params.strides		= [1, 1]
params.pool_sizes	= [2, 1]
params.dropouts     = [0, 0]
params.fc_units     = [] 
params.gsp          = true                      # End with a global sum pooling
params.batch_norm	= true
disabled = false

[[model]]
name = "eurosat_cnn_gsp_32x32x64" # target 85.56% in the paper
load                = false
train               = true
params.filters 		= [32, 32, 64]
params.kernel_sizes	= [3 , 3, 3 ]
params.paddings		= [0, 0, 0]
params.strides		= [1, 1, 1]
params.pool_sizes	= [2, 2, 1]
params.dropouts     = [0, 0, 0]
params.fc_units     = [] 
params.gsp          = true                      # End with a global sum pooling
params.batch_norm	= true
disabled = false
####
