[bench]
name = "GSC_DS-CNN_float32_train"
seed = 2
first_run = 1
last_run = 1

[learningframework]
kind = 'PyTorch'

[deploy]
target = 'Linux'
converter.kind = 'QualiaCodeGen'
quantize = ['float32']
optimize = ['']
compress = [1]

[dataset]
kind = "GSC"
params.variant = "v2"
params.path = "data/speech_commands_v0.02/"
params.subset = "digits"
params.train_valid_split = true

[[preprocessing]]
kind = "Class2BinMatrix"

[[preprocessing]]
kind = "Normalize"
params.method = 'z-score'
#params.method = 'min-max'
params.axis = 0
params.debug = true

[[data_augmentation]]
kind = "MFCC"
params.dims = 2
params.evaluate = true
params.sample_rate = 16000
params.n_mfcc = 10
params.log_mels = true
params.melkwargs.n_fft = 1024
params.melkwargs.n_mels = 40
#params.melkwargs.win_length = 640
params.melkwargs.win_length = 480
params.melkwargs.hop_length = 320
params.melkwargs.f_min = 20
params.melkwargs.f_max = 4000

# pad by hop_length to obtain expected 1 + floor( (n_samples - window_length) / hop_length) = 49 samples
# https://github.com/librosa/librosa/issues/595#issuecomment-313116650
params.melkwargs.pad = 320
params.melkwargs.center = false

[[postprocessing]]
kind = "FuseBatchNorm"
export = true

[model_template]
kind = "CNN"
epochs = 50
batch_size = 192

[model_template.optimizer]
#kind = "SGD"
#params.lr               = 0.05
#params.momentum		= 0.9
kind = "Adam"
params.lr = 0.01

[model_template.optimizer.scheduler]
kind = "MultiStepLR"
params.milestones	= [15, 30, 45]
params.gamma		= 0.1

# https://github.com/mlcommons/tiny/blob/master/benchmark/training/keyword_spotting/keras_model.py
[[model]]
name = "gsc_ds-cnn"
params.input_shape	= [49, 10, 1]
params.dims		      = 2
params.filters 		  = [     64,     64,     64,     64,     64]
params.kernel_sizes	= [[10, 4], [3, 3], [3, 3], [3, 3], [3, 3]]
params.paddings		  = [[5, 2],  [1, 1], [1, 1], [1, 1], [1, 1]]
params.strides		  = [[2, 2],  [1, 1], [1, 1], [1, 1], [1, 1]]
params.dropouts     = [   0.2,       0,      0,      0,    0.4]
params.separables   = [ false,    true,   true,   true,   true] # Which Conv layer are implemented as depthwise-pointwise combination
params.pool_sizes	  = [     0,       0,      0,      0,      0]
params.postpool		  = [24, 5]
params.fc_units		  = []
params.batch_norm = true
optimizer.params.weight_decay	= 1e-4
disabled = false
#disabled = true
